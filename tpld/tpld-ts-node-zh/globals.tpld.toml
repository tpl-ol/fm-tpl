# globals.tpld.toml
tpl-spec = "0.1.0"
from = "ts"
to = "zh_CN"

type = "lib:node"
# globals.d.ts
# scope: global

# 全局
[[d]]
scope = ""
[d.d]
process = "进程"
console = "控制台"
__filename = "__文件名"
__dirname = "__目录名"
require = "要求"
module = "模块"
exports = "导出的"
gc = "垃圾回收"
AbortController = "中止控制器"
AbortSignal = "中止信号"

[[d]]
scope = "ErrorConstructor"
to = "错误构造器"
[d.d]
"captureStackTrace()" = "捕获栈跟踪()"
"prepareStackTrace()" = "准备栈跟踪()"
stackTraceLimit = "栈跟踪限制"

[[d]]
scope = "AbortController"
to = "中止控制器"
[d.d]
signal = "信号"
"abort()" = "中止()"

[[d]]
scope = "AbortSignal"
to = "中止信号"
[d.d]
aborted = "已终止"

# ArrayLike.at()
[[d]]
scope = "RelativeIndexable"
to = "可相对索引"
[d.d]
"at()" = "位()"

[[d]]
scope = "NodeJS\n t:"
[d.d]
TypedArray = "类型数组"
ArrayBufferView = "数组存储视图"

[[d]]
scope = "NodeJS.CallSite"
to = "调用点"
[d.d]
"getThis()" = "取这()"
"getTypeName()" = "类型名()"
"getFunction()" = "函数()"
"getFunctionName()" = "函数名()"
"getMethodName()" = "方法名()"
"getFileName()" = "文件名()"
"getLineNumber()" = "行号()"
"getColumnNumber()" = "列号()"
"getEvalOrigin()" = "评估源()"
"isToplevel()" = "是顶级()"
"isEval()" = "是评估()"
"isNative()" = "是原生()"
"isConstructor()" = "是构造()"

[[d]]
scope = "NodeJS.ErrnoException"
to = "错误号例外"
[d.d]
errno = "错误号"
code = "码"
path = "路径"
syscall = "系统调用"
stack = "栈"

[[d]]
scope = "NodeJS.ReadableStream"
to = "可读流"
[d.d]
readable = "可读"
"read()" = "读()"
"setEncoding()" = "设编码()"
"pause()" = "暂停()"
"resume()" = "恢复()"
"isPaused()" = "已暂停()"
"pipe()" = "输送()"
"unpipe()" = "取消输送()"
"unshift()" = "加头()"
"wrap()" = "包装()"

[[d]]
scope = "NodeJS.WritableStream"
to = "可写流"
[d.d]
writable = "可写"
"write()" = "写()"
"end()" = "结束()"

[[d]]
scope = "NodeJS.ReadWriteStream"
to = "读写流"

[[d]]
scope = "NodeJS.RefCounted"
to = "引用计数"
[d.d]
"ref()" = "引用()"
"unref()" = "消引用()"

[[d]]
scope = "NodeJS.Require"
to = "要求"
[d.d]
resolve = "决定"
cache = "缓存"
main = "主"

[[d]]
scope = "NodeJS.RequireResolve"
to = "要求决定"
[d.d]
"paths()" = "路径()"

[[d]]
scope = "NodeJS.RequireExtensions"
to = "要求后缀"

[[d]]
scope = "NodeJS.Module"
to = "模块"
[d.d]
isPreloading = "预加载"
exports = "导出的"
require = "要求"
# 拒绝翻译
#id = ""
filename = "文件名"
loaded = "已加载"
parent = "上级"
children = "下级"
path = "路径"
paths = "路径们"

[[d]]
scope = ["NodeJS.Dict", "NodeJS.ReadOnlyDict"]
to = ["字典", "只读字典"]
[d.d]
key = "键"

# globals.global.d.ts
[[d]]
scope = ""
[d.d]
global = "全局"
globalThis = "全局这"
