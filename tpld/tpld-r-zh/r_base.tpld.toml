# r_base.tpld.toml
tpl-spec = "0.1.0"
from = "r"
to = "zh_CN"

type = "lib"
# package:base
scope = "p:base"

[[d]]
# 通过简单赋值即可实现, 如:  向量 <- c
# TODO
scope = "s:"
[d.d]
# 特殊函数 (.Primitive .Internal)
#.C()  拒绝翻译
".Call()" = ".调用()"
".Call.graphics()" = ".调用图形()"
".External()" = ".外部()"
".External.graphics()" = ".外部图形()"
#.Fortran()  拒绝翻译
".Internal()" = ".内部()"
".Primitive()" = ".原始()"
"as.call()" = "作调用()"
"as.character()" = "作字符()"
"as.complex()" = "作复数()"
"as.double()" = "作实数()"
"as.environment()" = "作环境()"
"as.integer()" = "作整数()"
"as.logical()" = "作逻辑()"
"as.raw()" = "作字节()"
"attr()" = "属()"
"attr<-" = "属<-"
"attributes()" = "属性()"
"attributes<-" = "属性<-"
"baseenv()" = "基环境()"
"browser()" = "浏览()"
"c()" = "向量()"
"call()" = "调用()"
"cbind()" = "列合()"
"class()" = "类()"
"class<-" = "类<-"
"dim()" = "维()"
"dim<-" = "维<-"
"dimnames()" = "维名()"
"dimnames<-" = "维名<-"
"eapply()" = "环境施用()"
"emptyenv()" = "空环境()"
"environment<-" = "环境<-"
"expression()" = "表达式()"
"globalenv()" = "全局环境()"
"interactive()" = "交互的()"
"invisible()" = "不可见()"
"is.array()" = "是数组()"
"is.atomic()" = "是原子()"
"is.call()" = "是调用()"
"is.character()" = "是字符()"
"is.complex()" = "是复数()"
"is.double()" = "是实数()"
"is.environment()" = "是环境()"
"is.expression()" = "是表达式()"
"is.finite()" = "是有限()"
"is.function()" = "是函数()"
"is.infinite()" = "是无限()"
"is.integer()" = "是整数()"
"is.language()" = "是语言()"
"is.list()" = "是列表()"
"is.logical()" = "是逻辑()"
"is.matrix()" = "是矩阵()"
"is.na()" = "是无()"
"is.name()" = "是名()"
"is.nan()" = "是非数()"
"is.null()" = "是空()"
"is.numeric()" = "是数字()"
"is.object()" = "是物()"
"is.pairlist()" = "是对表()"
"is.raw()" = "是字节()"
"is.recursive()" = "是递归()"
"is.single()" = "是单()"
"is.symbol()" = "是符号()"
"lapply()" = "列施用()"
"length()" = "长度()"
"length<-" = "长度<-"
"levels<-" = "级<-"
"list()" = "列表()"
"missing()" = "缺()"
"names()" = "名()"
"names<-" = "名<-"
"nargs()" = "参个数()"
"oldClass()" = "旧类()"
"oldClass<-" = "旧类<-"
"on.exit()" = "退出时()"
"pos.to.env()" = "位至环境()"
"quote()" = "引用()"
"rbind()" = "行合()"
"rep()" = "再造()"
"return()" = "返回()"
"round()" = "大约()"
"seq_along()" = "序同()"
"seq_len()" = "序长()"
"seq.int()" = "序内()"
"signif()" = "约数()"
"standardGeneric()" = "标准通用()"
"storage.mode<-" = "存储模式<-"
"substitute()" = "取代()"
"switch()" = "选择()"
"unclass()" = "去类()"
"vapply()" = "值施用()"
"withVisible()" = "同可见()"
"NextMethod()" = "下个方法()"
"Recall()" = "递归调用()"
"UseMethod()" = "用方法()"

# 常见函数
"library()" = "用()"
"q()" = "退出()"
#"as()" = "作()"

# R 4.1
# `ls("package:base")`
#
# 拒绝翻译
#-
"-.Date()" = "-.日期()"
#-.POSIXt
#:
#::
#:::
#!
"!.hexmode()" = "!.16进制模式()"
"!.octmode()" = "!.8进制模式()"
#!=
#(
#[
"[.AsIs()" = "[.原样()"
"[.data.frame()" = "[.数据框()"
"[.Date()" = "[.日期()"
"[.difftime()" = "[.时间差()"
"[.Dlist()" = "[.D列表()"
"[.DLLInfoList()" = "[.动态链接库信息表()"
"[.factor()" = "[.因子()"
"[.hexmode()" = "[.16进制模式()"
"[.listof()" = "[.列表于()"
"[.noquote()" = "[.不引用()"
"[.numeric_version()" = "[.数字版本()"
"[.octmode()" = "[.8进制模式()"
#[.POSIXct
#[.POSIXlt
"[.simple.list()" = "[.简单列表()"
"[.table()" = "[.表()"
"[.warnings()" = "[.警告()"
#[[
"[[.data.frame()" = "[[.数据框()"
"[[.Date()" = "[[.日期()"
"[[.factor()" = "[[.因子()"
"[[.numeric_version()" = "[[.数字版本()"
#[[.POSIXct
#[[.POSIXlt
#[[<-
"[[<-.data.frame()" = "[[<-.数据框()"
"[[<-.factor()" = "[[<-.因子()"
"[[<-.numeric_version()" = "[[<-.数字版本()"
#[[<-.POSIXlt
#[<-
"[<-.data.frame()" = "[<-.数据框()"
"[<-.Date()" = "[<-.日期()"
"[<-.difftime()" = "[<-.时间差()"
"[<-.factor()" = "[<-.因子()"
"[<-.numeric_version()" = "[<-.数字版本()"
#[<-.POSIXct
#[<-.POSIXlt
#{
#@
#@<-
#*
"*.difftime()" = "*.时间差()"
#/
"/.difftime()" = "/.时间差()"
#&
"&.hexmode()" = "&.16进制模式()"
"&.octmode()" = "&.8进制模式()"
#&&
#%*%
#%/%
#%%
"%in%()" = "%在%()"
#%o%
#%x%
#^
#+
"+.Date()" = "+.日期()"
#+.POSIXt
#<
#<-
#<<-
#<=
#=
#==
#>
#>=
#|
"|.hexmode()" = "|.16进制模式()"
"|.octmode()" = "|.8进制模式()"
#||
#~
#$
"$.DLLInfo()" = "$.动态链接库信息()"
"$.package_version()" = "$.包版本()"
#$<-
"$<-.data.frame()" = "$<-.数据框()"
"abbreviate()" = "缩写()"
"abs()" = "绝对值()"
"acos()" = "反余弦()"
"acosh()" = "双曲反余弦()"
"activeBindingFunction()" = "生效绑定函数()"
"addNA()" = "加无()"
"addTaskCallback()" = "加任务回调()"
"agrep()" = "模糊查找()"
"agrepl()" = "模糊查找逻辑()"
"alist()" = "参列表()"
"all()" = "全()"
"all.equal()" = "全等()"
"all.equal.character()" = "全等字符()"
"all.equal.default()" = "全等默认()"
"all.equal.environment()" = "全等环境()"
"all.equal.envRefClass()" = "全等环境参考类()"
"all.equal.factor()" = "全等因子()"
"all.equal.formula()" = "全等公式()"
"all.equal.function()" = "全等函数()"
"all.equal.language()" = "全等语言()"
"all.equal.list()" = "全等列表()"
"all.equal.numeric()" = "全等数字()"
"all.equal.POSIXt()" = "全等.POSIXt()"
"all.equal.raw()" = "全等字节()"
"all.names()" = "全名()"
"all.vars()" = "全变()"
"allowInterrupts()" = "允许中断()"
"any()" = "任何()"
"anyDuplicated()" = "任何复制()"
"anyDuplicated.array()" = "任何复制数组()"
"anyDuplicated.data.frame()" = "任何复制数据框()"
"anyDuplicated.default()" = "任何复制默认()"
"anyDuplicated.matrix()" = "任何复制矩阵()"
"anyNA()" = "任何无()"
"anyNA.data.frame()" = "任何无数据框()"
"anyNA.numeric_version()" = "任何无数字版本()"
"anyNA.POSIXlt()" = "任何无.POSIXlt()"
"aperm()" = "数组转置()"
"aperm.default()" = "数组转置默认()"
"aperm.table()" = "数组转置表()"
"append()" = "追加()"
"apply()" = "施用()"
#Arg
"args()" = "参数()"
"array()" = "数组()"
"arrayInd()" = "数组下标()"
"as.array()" = "作数组()"
"as.array.default()" = "作数组默认()"
#as.call
#as.character
"as.character.condition()" = "作字符条件()"
"as.character.Date()" = "作字符日期()"
"as.character.default()" = "作字符默认()"
"as.character.error()" = "作字符错误()"
"as.character.factor()" = "作字符因子()"
"as.character.hexmode()" = "作字符16进制模式()"
"as.character.numeric_version()" = "作字符数字版本()"
"as.character.octmode()" = "作字符8进制模式()"
"as.character.POSIXt()" = "作字符.POSIXt()"
"as.character.srcref()" = "作字符源引()"
#as.complex
"as.data.frame()" = "作数据框()"
"as.data.frame.array()" = "作数据框数组()"
"as.data.frame.AsIs()" = "作数据框原样()"
"as.data.frame.character()" = "作数据框字符()"
"as.data.frame.complex()" = "作数据框复数()"
"as.data.frame.data.frame()" = "作数据框数据框()"
"as.data.frame.Date()" = "作数据框日期()"
"as.data.frame.default()" = "作数据框默认()"
"as.data.frame.difftime()" = "作数据框时间差()"
"as.data.frame.factor()" = "作数据框因子()"
"as.data.frame.integer()" = "作数据框整数()"
"as.data.frame.list()" = "作数据框列表()"
"as.data.frame.logical()" = "作数据框逻辑()"
"as.data.frame.matrix()" = "作数据框矩阵()"
"as.data.frame.model.matrix()" = "作数据框模型矩阵()"
"as.data.frame.noquote()" = "作数据框不引用()"
"as.data.frame.numeric()" = "作数据框数字()"
"as.data.frame.numeric_version()" = "作数据框数字版本()"
"as.data.frame.ordered()" = "作数据框有序()"
"as.data.frame.POSIXct()" = "作数据框.POSIXct()"
"as.data.frame.POSIXlt()" = "作数据框.POSIXlt()"
"as.data.frame.raw()" = "作数据框字节()"
"as.data.frame.table()" = "作数据框表()"
"as.data.frame.ts()" = "作数据框时系()"
"as.data.frame.vector()" = "作数据框向量()"
"as.Date()" = "作日期()"
"as.Date.character()" = "作日期字符()"
"as.Date.default()" = "作日期默认()"
"as.Date.factor()" = "作日期因子()"
"as.Date.numeric()" = "作日期数字()"
"as.Date.POSIXct()" = "作日期.POSIXct()"
"as.Date.POSIXlt()" = "作日期.POSIXlt()"
"as.difftime()" = "作时间差()"
#as.double
"as.double.difftime()" = "作实数时间差()"
"as.double.POSIXlt()" = "作实数.POSIXlt()"
#as.environment
"as.expression()" = "作表达式()"
"as.expression.default()" = "作表达式默认()"
"as.factor()" = "作因子()"
"as.function()" = "作函数()"
"as.function.default()" = "作函数默认()"
"as.hexmode()" = "作16进制模式()"
#as.integer
"as.list()" = "作列表()"
"as.list.data.frame()" = "作列表数据框()"
"as.list.Date()" = "作列表日期()"
"as.list.default()" = "作列表默认()"
"as.list.difftime()" = "作列表时间差()"
"as.list.environment()" = "作列表环境()"
"as.list.factor()" = "作列表因子()"
"as.list.function()" = "作列表函数()"
"as.list.numeric_version()" = "作列表数字版本()"
"as.list.POSIXct()" = "作列表.POSIXct()"
"as.list.POSIXlt()" = "作列表.POSIXlt()"
#as.logical
"as.logical.factor()" = "作逻辑因子()"
"as.matrix()" = "作矩阵()"
"as.matrix.data.frame()" = "作矩阵数据框()"
"as.matrix.default()" = "作矩阵默认()"
"as.matrix.noquote()" = "作矩阵不引用()"
"as.matrix.POSIXlt()" = "作矩阵.POSIXlt()"
"as.name()" = "作名()"
"as.null()" = "作空()"
"as.null.default()" = "作空默认()"
"as.numeric()" = "作数字()"
"as.numeric_version()" = "作数字版本()"
"as.octmode()" = "作8进制模式()"
"as.ordered()" = "作有序()"
"as.package_version()" = "作包版本()"
"as.pairlist()" = "作对表()"
"as.POSIXct()" = "作.POSIXct()"
"as.POSIXct.Date()" = "作.POSIXct.日期()"
"as.POSIXct.default()" = "作.POSIXct.默认()"
"as.POSIXct.numeric()" = "作.POSIXct.数字()"
"as.POSIXct.POSIXlt()" = "作.POSIXct.POSIXlt()"
"as.POSIXlt()" = "作.POSIXlt()"
"as.POSIXlt.character()" = "作.POSIXlt.字符()"
"as.POSIXlt.Date()" = "作.POSIXlt.日期()"
"as.POSIXlt.default()" = "作.POSIXlt.默认()"
"as.POSIXlt.factor()" = "作.POSIXlt.因子()"
"as.POSIXlt.numeric()" = "作.POSIXlt.数字()"
"as.POSIXlt.POSIXct()" = "作.POSIXlt.POSIXct()"
"as.qr()" = "作QR()"
#as.raw
"as.single()" = "作单()"
"as.single.default()" = "作单默认()"
"as.symbol()" = "作符号()"
"as.table()" = "作表()"
"as.table.default()" = "作表默认()"
"as.vector()" = "作向量()"
"as.vector.factor()" = "作向量因子()"
"asin()" = "反正弦()"
"asinh()" = "双曲反正弦()"
"asNamespace()" = "作命名空间()"
"asplit()" = "数组切()"
"asS3()" = "作S3()"
"asS4()" = "作S4()"
"assign()" = "赋值()"
"atan()" = "反正切()"
"atan2()" = "反正切2()"
"atanh()" = "双曲反正切()"
"attach()" = "附加()"
"attachNamespace()" = "附加命名空间()"
#attr
"attr.all.equal()" = "属全等()"
#attr<-
#attributes
#attributes<-
"autoload()" = "自动加载()"
"autoloader()" = "自动加载器()"
"backsolve()" = "反解()"
#baseenv
"basename()" = "基名()"
#besselI
#besselJ
#besselK
#besselY
#beta
"bindingIsActive()" = "绑定是生效()"
"bindingIsLocked()" = "绑定是锁定()"
"bindtextdomain()" = "绑定文本域()"
"bitwAnd()" = "位与()"
"bitwNot()" = "位非()"
"bitwOr()" = "位或()"
"bitwShiftL()" = "位左移()"
"bitwShiftR()" = "位右移()"
"bitwXor()" = "位异或()"
"body()" = "体()"
"body<-" = "体<-"
"bquote()" = "反引()"
#break
#browser
"browserCondition()" = "浏览条件()"
"browserSetDebug()" = "浏览设调试()"
"browserText()" = "浏览文本()"
"builtins()" = "内置()"
"by()" = "按()"
"by.data.frame()" = "按数据框()"
"by.default()" = "按默认()"
"bzfile()" = "bz文件()"
#c
"c.Date()" = "向量日期()"
"c.difftime()" = "向量时间差()"
"c.factor()" = "向量因子()"
"c.noquote()" = "向量不引用()"
"c.numeric_version()" = "向量数字版本()"
"c.POSIXct()" = "向量.POSIXct()"
"c.POSIXlt()" = "向量.POSIXlt()"
"c.warnings()" = "向量警告()"
#call
"callCC()" = "调用当前继续()"
"capabilities()" = "能力()"
"casefold()" = "大小写()"
"cat()" = "接()"
#cbind
"cbind.data.frame()" = "列合数据框()"
"ceiling()" = "上取整()"
"char.expand()" = "字符扩展()"
"character()" = "字符()"
"charmatch()" = "字符匹配()"
"charToRaw()" = "字符至字节()"
"chartr()" = "字符替换()"
"check_tzones()" = "检查时区()"
"chkDots()" = "检查点()"
#chol
#chol.default
#chol2inv
#choose
#class
#class<-
"clearPushBack()" = "清除推回()"
"close()" = "关闭()"
"close.connection()" = "关闭连接()"
"close.srcfile()" = "关闭源文件()"
"close.srcfilealias()" = "关闭源文件别名()"
"closeAllConnections()" = "关闭全部连接()"
"col()" = "列()"
"colMeans()" = "列均值()"
"colnames()" = "列名()"
"colnames<-" = "列名<-"
"colSums()" = "列求和()"
"commandArgs()" = "命令参数()"
"comment()" = "注释()"
"comment<-" = "注释<-"
"complex()" = "复数()"
"computeRestarts()" = "计算重开()"
"conditionCall()" = "条件调用()"
"conditionCall.condition()" = "条件调用条件()"
"conditionMessage()" = "条件消息()"
"conditionMessage.condition()" = "条件消息条件()"
"conflictRules()" = "冲突规则()"
"conflicts()" = "冲突()"
#Conj
"contributors()" = "贡献者()"
"cos()" = "余弦()"
"cosh()" = "双曲余弦()"
#cospi
"crossprod()" = "叉乘()"
"Cstack_info()" = "C栈信息()"
"cummax()" = "累最大()"
"cummin()" = "累最小()"
"cumprod()" = "累乘()"
"cumsum()" = "累和()"
"curlGetHeaders()" = "curl取头()"
"cut()" = "切()"
"cut.Date()" = "切日期()"
"cut.default()" = "切默认()"
"cut.POSIXt()" = "切.POSIXt()"
"data.class()" = "数据类()"
"data.frame()" = "数据框()"
"data.matrix()" = "数据矩阵()"
"date()" = "日期()"
"debug()" = "调试()"
"debuggingState()" = "调试状态()"
"debugonce()" = "调试一次()"
"default.stringsAsFactors()" = "默认串至因子()"
"delayedAssign()" = "延迟赋值()"
"deparse()" = "反解析()"
"deparse1()" = "反解析1()"
"det()" = "行列式()"
"detach()" = "解除()"
"determinant()" = "计算行列式()"
"determinant.matrix()" = "计算行列式矩阵()"
"dget()" = "物文件读()"
"diag()" = "对角线()"
"diag<-" = "对角线<-"
"diff()" = "比()"
"diff.Date()" = "比日期()"
"diff.default()" = "比默认()"
"diff.difftime()" = "比时间差()"
"diff.POSIXt()" = "比.POSIXt()"
"difftime()" = "时间差()"
#digamma
#dim
"dim.data.frame()" = "维数据框()"
#dim<-
#dimnames
"dimnames.data.frame()" = "维名.数据框()"
#dimnames<-
"dimnames<-.data.frame()" = "维名<-.数据框()"
"dir()" = "目录()"
"dir.create()" = "目录建()"
"dir.exists()" = "目录有()"
"dirname()" = "目录名()"
"do.call()" = "执行调用()"
"dontCheck()" = "不检查()"
"double()" = "实数()"
"dput()" = "物文件写()"
"dQuote()" = "双引()"
"drop()" = "丢()"
"droplevels()" = "丢级()"
"droplevels.data.frame()" = "丢级数据框()"
"droplevels.factor()" = "丢级因子()"
"dump()" = "倾倒()"
"duplicated()" = "重复()"
"duplicated.array()" = "重复数组()"
"duplicated.data.frame()" = "重复数据框()"
"duplicated.default()" = "重复默认()"
"duplicated.matrix()" = "重复矩阵()"
"duplicated.numeric_version()" = "重复数字版本()"
"duplicated.POSIXlt()" = "重复.POSIXlt()"
"duplicated.warnings()" = "重复警告()"
"dyn.load()" = "动态加载()"
"dyn.unload()" = "动态卸载()"
"dynGet()" = "动态取()"
#eapply
"eigen()" = "特征()"
#emptyenv
"enc2native()" = "编码至原生()"
"enc2utf8()" = "编码至utf8()"
"encodeString()" = "编码串()"
"Encoding()" = "编码()"
"Encoding<-" = "编码<-"
"endsWith()" = "结尾()"
"enquote()" = "启引用()"
"env.profile()" = "环境概述()"
"environment()" = "环境()"
#environment<-
"environmentIsLocked()" = "环境锁定了()"
"environmentName()" = "环境名()"
"errorCondition()" = "错误条件()"
"eval()" = "执行()"
"eval.parent()" = "执行上级()"
"evalq()" = "执行引用()"
"exists()" = "存在()"
"exp()" = "指数()"
"expand.grid()" = "展开格()"
"expm1()" = "指数减1()"
#expression
"extSoftVersion()" = "扩展软件版本()"
#F
"factor()" = "因子()"
#factorial
"fifo()" = "先入先出()"
"file()" = "文件()"
"file.access()" = "文件访问()"
"file.append()" = "文件追加()"
"file.choose()" = "文件选择()"
"file.copy()" = "文件复制()"
"file.create()" = "文件建()"
"file.exists()" = "文件有()"
"file.info()" = "文件信息()"
"file.link()" = "文件链接()"
"file.mode()" = "文件模式()"
"file.mtime()" = "文件修改时间()"
"file.path()" = "文件路径()"
"file.remove()" = "文件移除()"
"file.rename()" = "文件重命名()"
"file.show()" = "文件显示()"
"file.size()" = "文件大小()"
"file.symlink()" = "文件符号链接()"
"Filter()" = "过滤()"
"Find()" = "找()"
"find.package()" = "找包()"
"findInterval()" = "找间隔()"
"findPackageEnv()" = "找包环境()"
"findRestart()" = "找重开()"
"floor()" = "下取整()"
"flush()" = "刷()"
"flush.connection()" = "刷连接()"
#for
"force()" = "强制()"
"forceAndCall()" = "强制调用()"
"formals()" = "形参()"
"formals<-" = "形参<-"
"format()" = "格式化()"
"format.AsIs()" = "格式化原样()"
"format.data.frame()" = "格式化数据框()"
"format.Date()" = "格式化日期()"
"format.default()" = "格式化默认()"
"format.difftime()" = "格式化时间差()"
"format.factor()" = "格式化因子()"
"format.hexmode()" = "格式化16进制模式()"
"format.info()" = "格式化信息()"
#format.libraryIQR
"format.numeric_version()" = "格式化数字版本()"
"format.octmode()" = "格式化8进制模式()"
"format.packageInfo()" = "格式化包信息()"
"format.POSIXct()" = "格式化.POSIXct()"
"format.POSIXlt()" = "格式化.POSIXlt()"
"format.pval()" = "格式化P值()"
"format.summaryDefault()" = "格式化总结默认()"
"formatC()" = "格式化C()"
"formatDL()" = "格式化描述表()"
"forwardsolve()" = "正解()"
#function
#gamma
"gc()" = "垃圾回收()"
"gc.time()" = "垃圾回收时间()"
"gcinfo()" = "垃圾回收信息()"
"gctorture()" = "垃圾回收折磨()"
"gctorture2()" = "垃圾回收折磨2()"
"get()" = "取()"
"get0()" = "取0()"
"getAllConnections()" = "取所有连接()"
"getCallingDLL()" = "取调用DLL()"
"getCallingDLLe()" = "取调用DLLe()"
"getConnection()" = "取连接()"
"getDLLRegisteredRoutines()" = "取DLL注册函数()"
"getDLLRegisteredRoutines.character()" = "取DLL注册函数字符()"
"getDLLRegisteredRoutines.DLLInfo()" = "取DLL注册函数DLL信息()"
"getElement()" = "取元素()"
"geterrmessage()" = "取错误消息()"
"getExportedValue()" = "取导出值()"
"getHook()" = "取钩子()"
"getLoadedDLLs()" = "取加载的DLL()"
"getNamespace()" = "取命名空间()"
"getNamespaceExports()" = "取命名空间导出()"
"getNamespaceImports()" = "取命名空间导入()"
"getNamespaceInfo()" = "取命名空间信息()"
"getNamespaceName()" = "取命名空间名()"
"getNamespaceUsers()" = "取命名空间用户()"
"getNamespaceVersion()" = "取命名空间版本()"
"getNativeSymbolInfo()" = "取原生符号信息()"
"getOption()" = "取选项()"
"getRversion()" = "取R版本()"
"getSrcLines()" = "取源码行()"
"getTaskCallbackNames()" = "取任务回调名()"
"gettext()" = "取文本()"
"gettextf()" = "取文本格式化()"
"getwd()" = "取工作目录()"
"gl()" = "产级()"
"globalCallingHandlers()" = "全局调用处理器()"
#globalenv
"gregexec()" = "查找执行()"
"gregexpr()" = "查找表达式()"
"grep()" = "查找()"
"grepl()" = "查找逻辑()"
"grepRaw()" = "查找字节()"
"grouping()" = "分组()"
"gsub()" = "匹配替换()"
"gzcon()" = "gz连接()"
"gzfile()" = "gz文件()"
"I()" = "禁止()"
"iconv()" = "编码转换()"
"iconvlist()" = "编码转换列表()"
"icuGetCollate()" = "icu取校对()"
"icuSetCollate()" = "icu设校对()"
"identical()" = "相同()"
"identity()" = "身份()"
#if
"ifelse()" = "若另()"
#Im
"importIntoEnv()" = "导入至环境()"
"infoRDS()" = "信息RDS()"
"inherits()" = "继承()"
"integer()" = "整数()"
"interaction()" = "交互()"
#interactive
"intersect()" = "相交()"
"intToBits()" = "整数至位()"
"intToUtf8()" = "整数至utf8()"
"inverse.rle()" = "反行程编码()"
#invisible
"invokeRestart()" = "调用重开()"
"invokeRestartInteractively()" = "调用重开交互式()"
#is.array
#is.atomic
#is.call
#is.character
#is.complex
"is.data.frame()" = "是数据框()"
#is.double
"is.element()" = "是元素()"
#is.environment
#is.expression
"is.factor()" = "是因子()"
#is.finite
#is.function
#is.infinite
#is.integer
#is.language
#is.list
"is.loaded()" = "是加载的()"
#is.logical
#is.matrix
#is.na
"is.na.data.frame()" = "是无数据框()"
"is.na.numeric_version()" = "是无数字版本()"
"is.na.POSIXlt()" = "是无.POSIXlt()"
"is.na<-" = "是无<-"
"is.na<-.default" = "是无<-.默认"
"is.na<-.factor" = "是无<-.因子"
"is.na<-.numeric_version" = "是无<-.数字版本"
#is.name
#is.nan
#is.null
#is.numeric
"is.numeric_version()" = "是数字版本()"
"is.numeric.Date()" = "是数字日期()"
"is.numeric.difftime()" = "是数字时间差()"
"is.numeric.POSIXt()" = "是数字.POSIXt()"
#is.object
"is.ordered()" = "是有序()"
"is.package_version()" = "是包版本()"
#is.pairlist
"is.primitive()" = "是原始()"
"is.qr()" = "是QR()"
"is.R()" = "是R()"
#is.raw
#is.recursive
#is.single
#is.symbol
"is.table()" = "是表()"
"is.unsorted()" = "是未排序()"
"is.vector()" = "是向量()"
"isa()" = "是()"
"isatty()" = "是终端()"
"isBaseNamespace()" = "是基命名空间()"
"isdebugged()" = "是可调试()"
"isFALSE()" = "是假()"
"isIncomplete()" = "是不全()"
"isNamespace()" = "是命名空间()"
"isNamespaceLoaded()" = "是命名空间加载的()"
"ISOdate()" = "ISO日期()"
"ISOdatetime()" = "ISO日期时间()"
"isOpen()" = "是开的()"
"isRestart()" = "是重开()"
"isS4()" = "是S4()"
"isSeekable()" = "是可定位()"
"isSymmetric()" = "是对称()"
"isSymmetric.matrix()" = "是对称矩阵()"
"isTRUE()" = "是真()"
"jitter()" = "抖动()"
"julian()" = "()"
"julian.Date()" = "()"
"julian.POSIXt()" = "()"
"kappa()" = "条件数()"
"kappa.default()" = "条件数默认()"
"kappa.lm()" = "条件数.lm()"
"kappa.qr()" = "条件数.qr()"
#kronecker
"l10n_info()" = "本地化信息()"
"La_library()" = "线性代数库()"
"La_version()" = "线性代数版本()"
"La.svd()" = "线性代数奇异值分解()"
"labels()" = "标签()"
"labels.default()" = "标签默认()"
#lapply
"lazyLoad()" = "懒加载()"
"lazyLoadDBexec()" = "懒加载数据库执行()"
"lazyLoadDBfetch()" = "懒加载数据库取()"
#lbeta
#lchoose
#length
"length.POSIXlt()" = "长度.POSIXlt()"
#length<-
"length<-.Date" = "长度<-.日期"
"length<-.difftime" = "长度<-.时间差"
"length<-.factor" = "长度<-.因子"
"length<-.POSIXct" = "长度<-.POSIXct"
"length<-.POSIXlt" = "长度<-.POSIXlt"
"lengths()" = "长度们()"
"letters" = "小写字母"
"LETTERS" = "大写字母"
#levels
"levels.default()" = "级默认()"
"levels<-" = "级<-"
"levels<-.factor" = "级<-.因子"
#lfactorial
#lgamma
"libcurlVersion()" = "libcurl版本()"
#library
"library.dynam()" = "用动态()"
"library.dynam.unload()" = "用动态卸载()"
"licence()" = "许可证2()"
"license()" = "许可证()"
#list
"list.dirs()" = "列出目录()"
"list.files()" = "列出文件()"
"list2DF()" = "列表至数据框()"
"list2env()" = "列表至环境()"
"load()" = "加载()"
"loadedNamespaces()" = "加载的命名空间()"
"loadingNamespaceInfo()" = "加载命名空间信息()"
"loadNamespace()" = "加载命名空间()"
"local()" = "局部()"
"lockBinding()" = "锁绑定()"
"lockEnvironment()" = "锁环境()"
#log
#log10
#log1p
#log2
#logb
"logical()" = "逻辑()"
"lower.tri()" = "下三角()"
"ls()" = "列出()"
"make.names()" = "制名()"
"make.unique()" = "制唯一()"
"makeActiveBinding()" = "制生效绑定()"
"Map()" = "映射()"
"mapply()" = "多施用()"
"margin.table()" = "边表()"
"marginSums()" = "边求和()"
"mat.or.vec()" = "矩阵或向量()"
"match()" = "匹配()"
"match.arg()" = "匹配参()"
"match.call()" = "匹配调用()"
"match.fun()" = "匹配函数()"
"Math.data.frame()" = "数学数据框()"
"Math.Date()" = "数学日期()"
"Math.difftime()" = "数学时间差()"
"Math.factor()" = "数学因子()"
"Math.POSIXt()" = "数学.POSIXt()"
"matrix()" = "矩阵()"
"max()" = "最大()"
"max.col()" = "最大列()"
"mean()" = "均值()"
"mean.Date()" = "均值日期()"
"mean.default()" = "均值默认()"
"mean.difftime()" = "均值时间差()"
"mean.POSIXct()" = "均值.POSIXct()"
"mean.POSIXlt()" = "均值.POSIXlt()"
"mem.maxNSize()" = "内存最大节点()"
"mem.maxVSize()" = "内存最大MB()"
"memCompress()" = "内存压缩()"
"memDecompress()" = "内存解压()"
"memory.profile()" = "内存概述()"
"merge()" = "合并()"
"merge.data.frame()" = "合并数据框()"
"merge.default()" = "合并默认()"
"message()" = "消息()"
"mget()" = "多取()"
"min()" = "最小()"
#missing
#Mod
"mode()" = "模式()"
"mode<-" = "模式<-"
"month.abb" = "月缩写"
"month.name" = "月名"
"months()" = "月()"
"months.Date()" = "月日期()"
"months.POSIXt()" = "月.POSIXt()"
"mostattributes<-" = "最多属性<-"
#names
"names.POSIXlt()" = "名.POSIXlt()"
#names<-
"names<-.POSIXlt" = "名<-.POSIXlt"
"namespaceExport()" = "命名空间导出()"
"namespaceImport()" = "命名空间导入()"
"namespaceImportClasses()" = "命名空间导入类()"
"namespaceImportFrom()" = "命名空间导入从()"
"namespaceImportMethods()" = "命名空间导入方法()"
#nargs
"nchar()" = "()"
"ncol()" = "()"
"NCOL()" = "()"
"Negate()" = "()"
"new.env()" = "新环境()"
#next
#NextMethod
"ngettext()" = "()"
"nlevels()" = "()"
"noquote()" = "不引用()"
"norm()" = "()"
"normalizePath()" = "标准路径()"
"nrow()" = "()"
"NROW()" = "()"
"nullfile()" = "空文件()"
"numeric()" = "数字()"
"numeric_version()" = "数字版本()"
"numToBits()" = "数字至位()"
"numToInts()" = "数字至整数()"
"nzchar()" = "()"
"objects()" = "物们()"
#oldClass
#oldClass<-
"OlsonNames()" = "()"
#on.exit
"open()" = "打开()"
"open.connection()" = "打开连接()"
"open.srcfile()" = "打开源文件()"
"open.srcfilealias()" = "打开源文件别名()"
"open.srcfilecopy()" = "打开源文件复制()"
"Ops.data.frame()" = "操作数据框()"
"Ops.Date()" = "操作日期()"
"Ops.difftime()" = "操作时间差()"
"Ops.factor()" = "操作因子()"
"Ops.numeric_version()" = "操作数字版本()"
"Ops.ordered()" = "操作有序()"
"Ops.POSIXt()" = "操作.POSIXt()"
"options()" = "选项()"
"order()" = "顺序()"
"ordered()" = "有序()"
"outer()" = "外()"
"package_version()" = "包版本()"
"packageEvent()" = "包事件()"
"packageHasNamespace()" = "包有命名空间()"
"packageNotFoundError()" = "包未找到错误()"
"packageStartupMessage()" = "包启动消息()"
"packBits()" = "打包位()"
"pairlist()" = "对表()"
"parent.env()" = "上级环境()"
"parent.env<-" = "上级环境<-"
"parent.frame()" = "上级帧()"
"parse()" = "解析()"
"parseNamespaceFile()" = "解析命名空间文件()"
"paste()" = "粘贴()"
"paste0()" = "粘贴0()"
"path.expand()" = "路径展开()"
"path.package()" = "路径包()"
"pcre_config()" = "pcre配置()"
#pi
"pipe()" = "管道()"
"plot()" = "绘图()"
"pmatch()" = "部分匹配()"
"pmax()" = "并行最大()"
"pmax.int()" = "并行最大整数()"
"pmin()" = "并行最小()"
"pmin.int()" = "并行最小整数()"
"polyroot()" = "()"
#pos.to.env
"Position()" = "位置()"
"pretty()" = "美化()"
"pretty.default()" = "美化默认()"
"prettyNum()" = "美化数字()"
"print()" = "打印()"
"print.AsIs()" = "打印原样()"
"print.by()" = "打印按()"
"print.condition()" = "打印条件()"
"print.connection()" = "打印连接()"
"print.data.frame()" = "打印数据框()"
"print.Date()" = "打印日期()"
"print.default()" = "打印默认()"
"print.difftime()" = "打印时间差()"
"print.Dlist()" = "()"
"print.DLLInfo()" = "打印DLL信息()"
"print.DLLInfoList()" = "打印DLL信息表()"
"print.DLLRegisteredRoutines()" = "打印DLL注册函数()"
"print.eigen()" = "打印特征()"
"print.factor()" = "打印因子()"
"print.function()" = "打印函数()"
"print.hexmode()" = "打印16进制模式()"
"print.libraryIQR()" = "打印.libraryIQR()"
"print.listof()" = "打印列表于()"
"print.NativeRoutineList()" = "打印原生函数列表()"
"print.noquote()" = "打印不引用()"
"print.numeric_version()" = "打印数字版本()"
"print.octmode()" = "打印8进制模式()"
"print.packageInfo()" = "打印包信息()"
"print.POSIXct()" = "打印.POSIXct()"
"print.POSIXlt()" = "打印.POSIXlt()"
"print.proc_time()" = "打印进程时间()"
"print.restart()" = "打印重开()"
"print.rle()" = "打印行程编码()"
"print.simple.list()" = "打印简单列表()"
"print.srcfile()" = "打印源文件()"
"print.srcref()" = "打印源引()"
"print.summary.table()" = "打印总结表()"
"print.summary.warnings()" = "打印总结警告()"
"print.summaryDefault()" = "打印总结默认()"
"print.table()" = "打印表()"
"print.warnings()" = "打印警告()"
"prmatrix()" = "()"
"proc.time()" = "进程时间()"
"prod()" = "产()"
"prop.table()" = "属性表()"
"proportions()" = "()"
"provideDimnames()" = "提供维名()"
#psigamma
"pushBack()" = "推回()"
"pushBackLength()" = "推回长度()"
#q
#qr
#qr.coef
#qr.default
#qr.fitted
#qr.Q
#qr.qty
#qr.qy
#qr.R
#qr.resid
#qr.solve
#qr.X
"quarters()" = "()"
"quarters.Date()" = "()"
"quarters.POSIXt()" = "()"
"quit()" = "退出程序()"
#quote
"R_system_version()" = "R系统版本()"
"R.home()" = "R主目录()"
"R.version()" = "R版本信息()"
"R.Version()" = "R版本()"
"R.version.string()" = "R版本串()"
"range()" = "范围()"
"range.default()" = "范围默认()"
"rank()" = "评分()"
"rapply()" = "()"
"raw()" = "字节()"
"rawConnection()" = "字节连接()"
"rawConnectionValue()" = "字节连接值()"
"rawShift()" = "字节移位()"
"rawToBits()" = "字节至位()"
"rawToChar()" = "字节至字符()"
#rbind
"rbind.data.frame()" = "()"
"rcond()" = "()"
#Re
"read.dcf()" = "()"
"readBin()" = "读二进制()"
"readChar()" = "读字符()"
"readline()" = "读行()"
"readLines()" = "读多行()"
"readRDS()" = "读RDS()"
"readRenviron()" = "读R环境()"
#Recall
"Reduce()" = "缩减()"
"reg.finalizer()" = "()"
"regexec()" = "()"
"regexpr()" = "()"
"registerS3method()" = "注册S3方法()"
"registerS3methods()" = "注册S3方法们()"
"regmatches()" = "()"
"regmatches<-()" = "()"
"remove()" = "移除()"
"removeTaskCallback()" = "移除任务回调()"
#rep
"rep_len()" = "再造长()"
"rep.Date()" = "再造日期()"
"rep.difftime()" = "再造时间差()"
"rep.factor()" = "再造因子()"
"rep.int()" = "再造整数()"
"rep.numeric_version()" = "再造数字版本()"
"rep.POSIXct()" = "再造.POSIXct()"
"rep.POSIXlt()" = "再造.POSIXlt()"
#repeat
"replace()" = "替换()"
"replicate()" = "再造2()"
"require()" = "要求()"
"requireNamespace()" = "要求命名空间()"
"restartDescription()" = "重开描述()"
"restartFormals()" = "重开形式()"
"retracemem()" = "()"
#return
"returnValue()" = "返回值()"
"rev()" = "()"
"rev.default()" = "()"
"rle()" = "行程编码()"
"rm()" = "删()"
"RNGkind()" = "随机数种类()"
"RNGversion()" = "随机数版本()"
#round
"round.Date()" = "大约日期()"
"round.POSIXt()" = "大约.POSIXt()"
"row()" = "行()"
"row.names()" = "行名()"
"row.names.data.frame()" = "行名数据框()"
"row.names.default()" = "行名默认()"
"row.names<-" = "行名<-"
"row.names<-.data.frame" = "行名<-.数据框"
"row.names<-.default" = "行名<-.默认"
"rowMeans()" = "行均值()"
"rownames()" = "行名称()"
"rownames<-" = "行名称<-"
"rowsum()" = "行求和()"
"rowsum.data.frame()" = "行求和数据框()"
"rowsum.default()" = "行求和默认()"
"rowSums()" = "多行求和()"
"sample()" = "样本()"
"sample.int()" = "样本内部()"
"sapply()" = "()"
"save()" = "保存()"
"save.image()" = "保存图像()"
"saveRDS()" = "保存RDS()"
"scale()" = "缩放()"
"scale.default()" = "缩放默认()"
"scan()" = "扫描()"
"search()" = "搜索()"
"searchpaths()" = "搜索路径()"
"seek()" = "定位()"
"seek.connection()" = "定位连接()"
"seq()" = "序()"
#seq_along
#seq_len
"seq.Date()" = "序日期()"
"seq.default()" = "序默认()"
#seq.int
"seq.POSIXt()" = "序.POSIXt()"
"sequence()" = "序列()"
"sequence.default()" = "序列默认()"
"serialize()" = "序列化()"
"serverSocket()" = "服务器插座()"
"set.seed()" = "设种子()"
"setdiff()" = "设差()"
"setequal()" = "设相等()"
"setHook()" = "设钩子()"
"setNamespaceInfo()" = "设命名空间信息()"
"setSessionTimeLimit()" = "设会话时间限制()"
"setTimeLimit()" = "设时间限制()"
"setwd()" = "设工作目录()"
"showConnections()" = "显示连接()"
"shQuote()" = "()"
"sign()" = "符号()"
"signalCondition()" = "信号条件()"
#signif
"simpleCondition()" = "简单条件()"
"simpleError()" = "简单错误()"
"simpleMessage()" = "简单消息()"
"simpleWarning()" = "简单警告()"
"simplify2array()" = "简化数组()"
"sin()" = "正弦()"
"single()" = "单()"
"sinh()" = "双曲正弦()"
"sink()" = "漏()"
"sink.number()" = "漏数()"
#sinpi
"slice.index()" = "切片下标()"
"socketAccept()" = "插座接受()"
"socketConnection()" = "插座连接()"
"socketSelect()" = "插座选择()"
"socketTimeout()" = "插座超时()"
"solve()" = "解()"
"solve.default()" = "解默认()"
"solve.qr()" = "解.qr()"
"sort()" = "排序()"
"sort.default()" = "排序默认()"
"sort.int()" = "排序内部()"
"sort.list()" = "排序列表()"
"sort.POSIXlt()" = "排序.POSIXlt()"
"source()" = "源()"
"split()" = "切分()"
"split.data.frame()" = "切分数据框()"
"split.Date()" = "切分日期()"
"split.default()" = "切分默认()"
"split.POSIXct()" = "切分.POSIXct()"
"split<-" = "切分<-"
"split<-.data.frame" = "切分<-.数据框"
"split<-.default" = "切分<-.默认"
"sprintf()" = "()"
"sqrt()" = "开方()"
"sQuote()" = "单引()"
"srcfile()" = "源文件()"
"srcfilealias()" = "源文件别名()"
"srcfilecopy()" = "源文件复制()"
"srcref()" = "源引()"
#standardGeneric
"startsWith()" = "开头()"
"stderr()" = "标准错误()"
"stdin()" = "标准输入()"
"stdout()" = "标准输出()"
"stop()" = "停止()"
"stopifnot()" = "停止若没()"
"storage.mode()" = "存储模式()"
#storage.mode<-
"str2expression()" = "串至表达式()"
"str2lang()" = "串至语言()"
"strftime()" = "()"
"strptime()" = "()"
"strrep()" = "()"
"strsplit()" = "串切()"
"strtoi()" = "()"
"strtrim()" = "串修剪()"
"structure()" = "结构()"
"strwrap()" = "串包装()"
"sub()" = "减()"
"subset()" = "下级()"
"subset.data.frame()" = "下级数据框()"
"subset.default()" = "下级默认()"
"subset.matrix()" = "下级矩阵()"
#substitute
"substr()" = "下级串()"
"substr<-" = "下级串<-"
"substring()" = "下级字符串()"
"substring<-" = "下级字符串<-"
"sum()" = "求和()"
"summary()" = "总结()"
"summary.connection()" = "总结连接()"
"summary.data.frame()" = "总结数据框()"
"Summary.data.frame()" = "大总结数据框()"
"summary.Date()" = "总结日期()"
"Summary.Date()" = "大总结日期()"
"summary.default()" = "总结默认()"
"Summary.difftime()" = "总结时间差()"
"summary.factor()" = "总结因子()"
"Summary.factor()" = "大总结因子()"
"summary.matrix()" = "总结矩阵()"
"Summary.numeric_version()" = "总结数字版本()"
"Summary.ordered()" = "总结有序()"
"summary.POSIXct()" = "总结.POSIXct()"
"Summary.POSIXct()" = "大总结.POSIXct()"
"summary.POSIXlt()" = "总结.POSIXlt()"
"Summary.POSIXlt()" = "大总结.POSIXlt()"
"summary.proc_time()" = "总结进程时间()"
"summary.srcfile()" = "总结源文件()"
"summary.srcref()" = "总结源引()"
"summary.table()" = "总结表()"
"summary.warnings()" = "总结警告()"
"suppressMessages()" = "禁止消息()"
"suppressPackageStartupMessages()" = "禁止包启动消息()"
"suppressWarnings()" = "禁止警告()"
"suspendInterrupts()" = "挂起中断()"
"svd()" = "奇异值()"
"sweep()" = "清扫()"
#switch
"sys.call()" = "系统调用()"
"sys.calls()" = "系统调用们()"
"Sys.chmod()" = "系统改模式()"
"Sys.Date()" = "系统日期()"
"sys.frame()" = "系统帧()"
"sys.frames()" = "系统帧们()"
"sys.function()" = "系统函数()"
"Sys.getenv()" = "系统取环境()"
"Sys.getlocale()" = "系统取区域()"
"Sys.getpid()" = "系统取进程id()"
"Sys.glob()" = "系统通配符()"
"Sys.info()" = "系统信息()"
"sys.load.image()" = "系统加载镜像()"
"Sys.localeconv()" = "系统区域转换()"
"sys.nframe()" = "系统帧数()"
"sys.on.exit()" = "系统退出时()"
"sys.parent()" = "系统上级()"
"sys.parents()" = "系统上级们()"
"Sys.readlink()" = "系统读链接()"
"sys.save.image()" = "系统保存镜像()"
"Sys.setenv()" = "系统设环境()"
"Sys.setFileTime()" = "系统设文件时间()"
"Sys.setlocale()" = "系统设区域()"
"Sys.sleep()" = "系统睡()"
"sys.source()" = "系统源()"
"sys.status()" = "系统状态()"
"Sys.time()" = "系统时间()"
"Sys.timezone()" = "系统时区()"
"Sys.umask()" = "系统用户掩码()"
"Sys.unsetenv()" = "系统不设环境()"
"Sys.which()" = "系统哪个()"
"system()" = "系统()"
"system.file()" = "系统文件()"
"system.time()" = "系统的时间()"
"system2()" = "系统2()"
"t()" = "转置()"
#T
"t.data.frame()" = "转置数据框()"
"t.default()" = "转置默认()"
"table()" = "表()"
"tabulate()" = "表的()"
"tan()" = "正切()"
"tanh()" = "双曲正切()"
#tanpi
"tapply()" = "()"
"taskCallbackManager()" = "任务回调管理器()"
"tcrossprod()" = "()"
"tempdir()" = "临时目录()"
"tempfile()" = "临时文件()"
"textConnection()" = "文本连接()"
"textConnectionValue()" = "文本连接值()"
"tolower()" = "至小写()"
"topenv()" = "顶环境()"
"toString()" = "至串()"
"toString.default()" = "至串默认()"
"toupper()" = "至大写()"
"trace()" = "追踪()"
"traceback()" = "反追踪()"
"tracemem()" = "追踪内存()"
"tracingState()" = "追踪状态()"
"transform()" = "转换()"
"transform.data.frame()" = "转换数据框()"
"transform.default()" = "转换默认()"
#trigamma
"trimws()" = "()"
"trunc()" = "截断()"
"trunc.Date()" = "截断日期()"
"trunc.POSIXt()" = "截断.POSIXt()"
"truncate()" = "截()"
"truncate.connection()" = "截连接()"
"try()" = "试()"
"tryCatch()" = "试捉()"
"tryInvokeRestart()" = "试调用重开()"
"typeof()" = "其类型()"
#unclass
"undebug()" = "不调试()"
"union()" = "联合()"
"unique()" = "唯一()"
"unique.array()" = "唯一数组()"
"unique.data.frame()" = "唯一数据框()"
"unique.default()" = "唯一默认()"
"unique.matrix()" = "唯一矩阵()"
"unique.numeric_version()" = "唯一数字版本()"
"unique.POSIXlt()" = "唯一.POSIXlt()"
"unique.warnings()" = "唯一警告()"
"units()" = "单位()"
"units.difftime()" = "单位时间差()"
"units<-" = "单位<-"
"units<-.difftime" = "单位<-.时间差"
"unix.time()" = "unix时间()"
"unlink()" = "不链接()"
"unlist()" = "不列出()"
"unloadNamespace()" = "卸载命名空间()"
"unlockBinding()" = "解锁绑定()"
"unname()" = "不命名()"
"unserialize()" = "不序列化()"
"unsplit()" = "不切分()"
"untrace()" = "不追踪()"
"untracemem()" = "不追踪内存()"
"unz()" = "()"
"upper.tri()" = "上三角()"
#url
#UseMethod
"utf8ToInt()" = "utf8至整数()"
"validEnc()" = "有效编码()"
"validUTF8()" = "有效utf8()"
#vapply
"vector()" = "向量类()"
"Vectorize()" = "向量化()"
"version()" = "版本()"
"warning()" = "警告()"
"warningCondition()" = "警告条件()"
"warnings()" = "警告们()"
"weekdays()" = "工作日()"
"weekdays.Date()" = "工作日日期()"
"weekdays.POSIXt()" = "工作日.POSIXt()"
"which()" = "哪个()"
"which.max()" = "哪个最大()"
"which.min()" = "哪个最小()"
#while
"with()" = "同()"
"with.default()" = "同默认()"
"withAutoprint()" = "同自动打印()"
"withCallingHandlers()" = "同调用处理器()"
"within()" = "之内()"
"within.data.frame()" = "之内数据框()"
"within.list()" = "之内列表()"
"withRestarts()" = "同重开()"
#withVisible
"write()" = "写()"
"write.dcf()" = "()"
"writeBin()" = "写二进制()"
"writeChar()" = "写字符()"
"writeLines()" = "写行()"
"xor()" = "异或()"
"xpdrows.data.frame()" = "()"
"xtfrm()" = "排序评分()"
"xtfrm.AsIs()" = "排序评分原样()"
"xtfrm.data.frame()" = "排序评分数据框()"
"xtfrm.Date()" = "排序评分日期()"
"xtfrm.default()" = "排序评分默认()"
"xtfrm.difftime()" = "排序评分时间差()"
"xtfrm.factor()" = "排序评分因子()"
"xtfrm.numeric_version()" = "排序评分数字版本()"
"xtfrm.POSIXct()" = "排序评分.POSIXct()"
"xtfrm.POSIXlt()" = "排序评分.POSIXlt()"
"xzfile()" = "xz文件()"
"zapsmall()" = "压缩小()"

# TODO 函数的参数
# TODO 函数返回值
